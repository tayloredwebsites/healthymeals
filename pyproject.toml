# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
    "case_*.py",
    "cases_*.py",
    "*_case.py",
    "*_cases.py"
]

# ==== Coverage ====
[tool.coverage.run]
include = ["healthymeals/**"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "django_project/asgi.py",
    "django_project/wsgi.py",
    "manage.py",
    ".venv/*",
    "*LICENSE.txt",
    "*README.txt",
    "requirements.txt",
    "docs/*",
    ".nox/*",
    "noxfile.py"
]
plugins = ["django_coverage_plugin"]
[tool.coverage.report]
exclude_lines = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    # "class .*\bProtocol\):",  # parsing error
    # "@(abc\.)?abstractmethod",  # parsing error
    "pragma: no cover",
]
exclude_also = [
    # # 1. Exclude an except clause of a specific form:
    # "except ValueError:\n\s*assume\(False\)",
    # # 2. Comments to turn coverage on and off:  # parsing error
    # "no cover: start(?s:.)*?no cover: stop",
    # # 3. A pragma comment that excludes an entire file:
    # "\A(?s:.*# pragma: exclude file.*)\Z",  # parsing error
]
[tool.coverage.html]
directory = "docs/qa/coverage/html/"
[tool.coverage.xml]
output = "docs/qa/coverage/coverage.xml"
[tool.django.coverage.plugin]
template_extensions = ["html", "txt"]


# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"

# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

[tool.ruff]
target-version = "py312"
# Exclude a variety of commonly ignored directories.
extend-exclude = [
    "*/migrations/*.py",
    "staticfiles/*",
    "docs/*",
]

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  "ISC",
  "ICN",
  "G",
  "INP",
  "PIE",
  "T20",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TC",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF",
]
ignore = [
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
  "UP038", # Checks for uses of isinstance/issubclass that take a tuple
          # of types for comparison.
          # Deactivated because it can make the code slow:
          # https://github.com/astral-sh/ruff/issues/7871
  "RUF100", # prevent claiming directive is not used when it is
            # it is prevent individual lines from having errors
#   "ERA001", # Does  not allow for commented out code
#             # it is important to allow this in configuration files
]
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
    "UP038",
]

[tool.ruff.lint.isort]
force-single-line = true

# this is ignored by flake 8, even with "--config=pyproject.toml",  # noqa: ERA001
#   got error: parsing errors: 'pyproject.toml - [line 13]: ']\n'  # noqa: ERA001
#   it doesn't seem to like multi-line arrays  # noqa: ERA001
# [tool.flake8]  # noqa: ERA001
# max_line_length = 120  # noqa: ERA001
# exclude = [  # noqa: ERA001
#     "migrations",  # noqa: ERA001
# ]  # noqa: ERA001
# ignore = [  # noqa: ERA001
#     "E252",  # noqa: ERA001
# ]  # noqa: ERA001
# select = [  # noqa: ERA001
#     "E251",  # noqa: ERA001
# ]  # noqa: ERA001